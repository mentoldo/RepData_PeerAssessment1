# print.ts(.)
## Using July 1954 as start date:
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
## Multivariate
z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
class(z)
head(z) # as "matrix"
plot(z)
plot(z, plot.type = "single", lty = 1:3)
## A phase plot:
plot(nhtemp, lag(nhtemp, 1), cex = .8, col = "blue",
main = "Lag plot of New Haven temperatures")
ts(activity$interval)
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
g <- ggplot(averagedaily, aes(mean, interval))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
averagedaily
unique(averagedaily$interval)
activity$time <- make_datetime(hour = hours, min = minutes)
str(activity)
?ts
unique(activity$interval)
length(unique(activity$interval))
ps(activity$interval, end = 288)
ts(activity$interval, end = 288)
ts(activity$interval, start = 1, end = 288)
ts(activity$interval, start = 1, frequency = 288)
ts(activity$interval, frequency = 288)
ts(activity$interval, end = 2355 frequency = 288)
ts(activity$interval, end = 2355, frequency = 288)
require(graphics)
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
# print.ts(.)
## Using July 1954 as start date:
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
cycle(presidents)
presidents
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myvector <- rnorm(72)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myts
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=7)
myts
myts <- ts(myvector, start=c(2009, 1), frequency=7)
myts
format(activity$time)
strftime(activity$datetime, format = "%H:%M")
averagedaily <- activity %>%
group_by(strftime(activity$datetime, format = "%H:%M")) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
mutate(time = strftime(activity$datetime, format = "%H:%M")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
activity$date <- ymd(activity$date, tz = "UTC")
year <- year(activity$date)
month <- month(activity$date)
day <- day(activity$date)
minsec <- formatC(activity$interval, width = 4, flag = "0")
hours <- substr(minsec, 1, 2)
minutes <- substr(minsec, 3, 4)
activity$datetime <- make_datetime(year, month, day, hours, minutes)
select(activity, datetime, date)
select(activity, datetime, date, interval)
averagedaily <- activity %>%
mutate(time = strftime(activity$datetime, format = "%H:%M")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
str(activity)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- ymd(activity$date, tz = "UTC")
summary(activity$date)
year <- year(activity$date)
month <- month(activity$date)
day <- day(activity$date)
minsec <- formatC(activity$interval, width = 4, flag = "0")
hours <- substr(minsec, 1, 2)
minutes <- substr(minsec, 3, 4)
activity$datetime <- make_datetime(year, month, day, hours, minutes)
str(activity)
averagedaily <- activity %>%
mutate(time = strftime(activity$datetime, format = "%H:%M")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE))
str(activity)
averagedaily
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
mutate(time = strftime(activity$datetime, format = "%H:%M")) %>%
group_by(as.factor(time)) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
activity %>%
mutate(time = strftime(activity$datetime, format = "%H:%M"))
Sys.getlocale()
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M")) %>%
group_by(as.factor(time)) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
strftime(activity$datetime, format = "%H:%M")
strftime(activity$datetime, format = "%H:%M", tz = UTC)
strftime(activity$datetime, format = "%H:%M", tz = "UTC")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(as.factor(time)) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = hm(time))
averagedaily
hm(activity$datetime)
hm(strftime(activity$datetime, format = "%H:%M", tz = UTC))
hm(strftime(activity$datetime, format = "%H:%M", tz = "UTC"))
averagedaily <- activity %>%
mutate(time = hm(strftime(datetime, format = "%H:%M", tz = "UTC"))) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
averagedaily <- activity %>%
mutate(time = hm(strftime(datetime, format = "%H:%M", tz = "UTC"))) %>%
group_by(time)
averagedaily
averagedaily <- activity %>%
mutate(time = hm(strftime(datetime, format = "%H:%M", tz = "UTC"))) %>%
group_by(factor(time)) %>%
summarise(mean = mean(steps, na.rm = TRUE))
averagedaily
days()
milliseconds()
class(days())
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = hm(time))
averagedaily
g <- ggplot(averagedaily, aes(mean, time))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g <- ggplot(averagedaily, aes(mean, time))
g + geom_line()
g <- ggplot(averagedaily, aes(mean, as.numeric(time)))
g + geom_line()
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
g <- ggplot(averagedaily, aes(mean, interval))
g <- ggplot(averagedaily, aes(interval, mean))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = hm(time))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
averagedaily
g <- ggplot(averagedaily, aes(time$minute, mean))
g + geom_line()
g <- ggplot(averagedaily, aes(time$day, mean))
g + geom_line()
g <- ggplot(averagedaily, aes(time$hour, mean))
g + geom_line()
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
g <- ggplot(averagedaily, aes((ymd("2008-01-01") + time, mean))
g + geom_line()
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g <- ggplot(averagedaily, aes(ymd("2008-01-01") + time, mean))
g + geom_line()
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
today()
class(today())
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = today() + hm(time))
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = ymd(today()) + hm(time))
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = ymd(today()) + hm(time))
ymd(today())
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = ymd(today()) + hm(time))
ymd(today())
class(ymd(today()))
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(today()) + hm(time))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
?pretty_dates
x <- seq.Date(as.Date("2009-08-02"), by = "year", length.out = 2)
x
pretty_dates(x, 12)
pretty_dates(averagedaily$time)
pretty_dates(averagedaily$time, 10)
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = hm(time))
pretty_dates(averagedaily$time, 10)
?as.POSIXct
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(today("2017-01-01")) + hm(time))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
pretty_dates(averagedaily$time, 10)
pretty_dates(averagedaily$time, by = "hours", 10)
pretty_dates(averagedaily$time, by = "hours", 1)
pretty_dates(averagedaily$time, by = "hour", 1)
as.POSIXct(1)
as.POSIXct(origin)
origin
?origin
chron
chron()
POSIXct(1)
POSIXct("1")
al.POSIXct(1, origin = origin)
as.POSIXct(1, origin = origin)
as.POSIXct(2, origin = origin)
as.POSIXct(0, origin = origin)
as.POSIXct(origin)
as.POSIXct(origin)
?as.POSIXct
as.POSIXct(0, tz = "UTC", origin = origin)
class(origin)
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
as.POSIXct(0, tz = "UTC", origin = origin)
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
steps <- setNames(,
c("10 secs", "1 min", "5 mins", "30 mins", "6 hours", "12 hours",
"1 DSTday", "2 weeks", "1 month", "6 months", "1 year",
"10 years", "50 years", "1000 years"))
x <- as.POSIXct("2002-02-02 02:02")
lapply(steps,
unction(s) {
at <- pretty(seq(x, by = s, length = 2), n = 5)
attr(at, "labels")
})
range(averagedaily$time))
range(averagedaily$time)
pretty_dates(range(averagedaily$time))
pretty_dates(range(averagedaily$time), 10)
pretty_dates(range(averagedaily$time), 10, format = "%H%M")
pretty
?pretty
pretty_dates(range(averagedaily$time), 10, by = "hour")
pretty_dates()
pretty_dates
?format
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_date(date_labels = "%H:%M")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line()
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_date(date_labels = "%H:%M")
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_date(date_labels = "%H : %M")
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_date(date_labels = "%H")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_date(date_labels = "%H")
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_datetime(date_labels = "%H")
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_datetime(date_labels = "%H:%M")
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Number of steps taken across all days") +
scale_x_datetime(date_labels = "%H:%M")
as.POSIXct(0, tz = "UTC", origin = origin)
g + geom_line() +
labs(x = "5-minute interval", y = "Average number of steps taken across all days") +
scale_x_datetime(date_labels = "%H:%M")
seq_along(activity$interval)
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
g <- ggplot(averagedaily, aes(interval, mean))
g + geom_line() +
geom_smooth(se = FALSE) +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g + geom_line() +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Average number of steps taken across all days") +
scale_x_datetime(date_labels = "%H:%M")
g <- ggplot(averagedaily, aes(interval, mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
averagedaily <- activity %>%
group_by(interval) %>%
summarise(mean = mean(steps, na.rm = TRUE))
g <- ggplot(averagedaily, aes(interval, mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
g <- ggplot(averagedaily, aes(seq_along(interval), mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Number of steps taken across all days")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
g <- ggplot(averagedaily, aes(time, mean))
g + geom_line() +
labs(x = "5-minute interval", y = "Average number of steps taken across all days") +
scale_x_datetime(date_labels = "%H:%M")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
averagedaily
which(max(averagedaily$mean))
max(averagedaily$mean)
with(averagedaily, time(which.max(mean)))
which.max(average$mean)
which.max(averagedaily$mean)
with(averagedaily, time[which.max(mean]))
with(averagedaily, time[which.max(mean)])
maxaverage <- with(averagedaily, time[which.max(mean)])
print(maxaverage, format = "%H%M")
strftime(maxaverage, format = "%H%M")
strftime(maxaverage, format = "%H:%M")
averagedaily <- activity %>%
mutate(time = strftime(datetime, format = "%H:%M", tz = "UTC")) %>%
group_by(time) %>%
summarise(mean = mean(steps, na.rm = TRUE)) %>%
mutate(time = as.POSIXct(origin + hm(time)))
maxaverage <- with(averagedaily, time[which.max(mean)])
strftime(maxaverage, format = "%H:%M")
maxaverage
max(averagedaily$mean)
maxaverage
averagedaily
averagedaily$time[4]
averagedaily$time[10]
strftime(maxaverage, format = "%H:%M", tz = "UTC")
strftime(maxaverage, format = "%H:%M", tz = "UTC")
with(activity, sum(is.na(steps)))
summary(activity)
summary(activity)$steps
summary(activity)[1]
summary(activity)[2]
summary(activity)[10]
with(activity, sum(is.na(steps)))
activity %>%
group_by(interval) %>%
with(activity, if(is.na(steps){
}))
if(is.na(steps)
{}
{}
if(is.na(steps) skip
if(is.na(steps)) skip
if(is.na(steps))
if(is.na(steps)) skip
?sapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# median and quartiles for each list element
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
seq.len(activity$steps)
seq_len(activity$steps)
seq_len(10)
?seq_along
mean(activity$steps[activity$interval == activity$interval[1]])
mean(activity$steps[activity$interval == activity$interval[1]], na.rm = TRUE)
activity$interval == activity$interval[1]
totalmeanperint <- function(x){
mean(activity$steps[activity$interval == activity$interval[x], na.rm = TRUE])
}
totalmeanperint(1)
totalmeanperint <- function(x){
mean(activity$steps[activity$interval == activity$interval[x]], na.rm = TRUE])
}
totalmeanperint <- function(x){
mean(activity$steps[activity$interval == activity$interval[x]], na.rm = TRUE)
}
totalmeanperint(1)
totalmeanperint(2)
fillactivity <- activity
activity %>% filter(interval == 0) %>% select(step) %>% mean
activity %>% filter(interval == 0) %>% select(steps) %>% mean
activity %>% filter(interval == 0) %>% select(steps) %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.vector() %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.vector()
source('~/Escritorio/DataScience/Coursera/Proyectos/reproducible-research/semana2/RepData_PeerAssessment1/assignment1.R', echo=TRUE)
source('~/Escritorio/DataScience/Coursera/Proyectos/reproducible-research/semana2/RepData_PeerAssessment1/assignment1.R', echo=TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.vector() %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.numeric() %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% unclass() %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.numeric() %>% mean(na.rm = TRUE)
activity %>% filter(interval == 0) %>% select(steps) %>% as.vector() %>% mean(na.rm = TRUE)
as.vector?
?as.vector
vector <- activity %>% filter(interval == 0) %>% select(steps)
vector
class(vector)
as.vector(vector)
class(as.vector(vector))
class(as.vector(vector, mode = "numeric"))
vector <- activity %>% filter(interval == 0) %>% select(steps)[1]
vector <- activity %>% filter(interval == 0) %>% select(steps)[,1]
vector <- activity %>% filter(interval == 0) %>% select(steps)$steps
vector <- activity %>% filter(interval == 0) %>% select(steps)
mean(vector$steps, na.rm = TRUE)
